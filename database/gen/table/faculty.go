//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Faculty = newFacultyTable("", "faculty", "")

type facultyTable struct {
	sqlite.Table

	// Columns
	ID           sqlite.ColumnInteger
	Name         sqlite.ColumnString
	Abbreviation sqlite.ColumnString
	CreatedAt    sqlite.ColumnTimestamp
	UpdatedAt    sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type FacultyTable struct {
	facultyTable

	EXCLUDED facultyTable
}

// AS creates new FacultyTable with assigned alias
func (a FacultyTable) AS(alias string) *FacultyTable {
	return newFacultyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FacultyTable with assigned schema name
func (a FacultyTable) FromSchema(schemaName string) *FacultyTable {
	return newFacultyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FacultyTable with assigned table prefix
func (a FacultyTable) WithPrefix(prefix string) *FacultyTable {
	return newFacultyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FacultyTable with assigned table suffix
func (a FacultyTable) WithSuffix(suffix string) *FacultyTable {
	return newFacultyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFacultyTable(schemaName, tableName, alias string) *FacultyTable {
	return &FacultyTable{
		facultyTable: newFacultyTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newFacultyTableImpl("", "excluded", ""),
	}
}

func newFacultyTableImpl(schemaName, tableName, alias string) facultyTable {
	var (
		IDColumn           = sqlite.IntegerColumn("id")
		NameColumn         = sqlite.StringColumn("name")
		AbbreviationColumn = sqlite.StringColumn("abbreviation")
		CreatedAtColumn    = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn    = sqlite.TimestampColumn("updated_at")
		allColumns         = sqlite.ColumnList{IDColumn, NameColumn, AbbreviationColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = sqlite.ColumnList{NameColumn, AbbreviationColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return facultyTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		Abbreviation: AbbreviationColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
