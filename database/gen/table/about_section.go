//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var AboutSection = newAboutSectionTable("", "about_section", "")

type aboutSectionTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	Title     sqlite.ColumnString
	Content   sqlite.ColumnString
	CreatedAt sqlite.ColumnTimestamp
	UpdatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AboutSectionTable struct {
	aboutSectionTable

	EXCLUDED aboutSectionTable
}

// AS creates new AboutSectionTable with assigned alias
func (a AboutSectionTable) AS(alias string) *AboutSectionTable {
	return newAboutSectionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AboutSectionTable with assigned schema name
func (a AboutSectionTable) FromSchema(schemaName string) *AboutSectionTable {
	return newAboutSectionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AboutSectionTable with assigned table prefix
func (a AboutSectionTable) WithPrefix(prefix string) *AboutSectionTable {
	return newAboutSectionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AboutSectionTable with assigned table suffix
func (a AboutSectionTable) WithSuffix(suffix string) *AboutSectionTable {
	return newAboutSectionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAboutSectionTable(schemaName, tableName, alias string) *AboutSectionTable {
	return &AboutSectionTable{
		aboutSectionTable: newAboutSectionTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newAboutSectionTableImpl("", "excluded", ""),
	}
}

func newAboutSectionTableImpl(schemaName, tableName, alias string) aboutSectionTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		TitleColumn     = sqlite.StringColumn("title")
		ContentColumn   = sqlite.StringColumn("content")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn = sqlite.TimestampColumn("updated_at")
		allColumns      = sqlite.ColumnList{IDColumn, TitleColumn, ContentColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = sqlite.ColumnList{TitleColumn, ContentColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return aboutSectionTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Title:     TitleColumn,
		Content:   ContentColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
