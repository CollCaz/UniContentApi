//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Department = newDepartmentTable("", "department", "")

type departmentTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnInteger
	Name        sqlite.ColumnString
	FacultyName sqlite.ColumnString
	FacultyID   sqlite.ColumnInteger
	CreatedAt   sqlite.ColumnTimestamp
	UpdatedAt   sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type DepartmentTable struct {
	departmentTable

	EXCLUDED departmentTable
}

// AS creates new DepartmentTable with assigned alias
func (a DepartmentTable) AS(alias string) *DepartmentTable {
	return newDepartmentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DepartmentTable with assigned schema name
func (a DepartmentTable) FromSchema(schemaName string) *DepartmentTable {
	return newDepartmentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DepartmentTable with assigned table prefix
func (a DepartmentTable) WithPrefix(prefix string) *DepartmentTable {
	return newDepartmentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DepartmentTable with assigned table suffix
func (a DepartmentTable) WithSuffix(suffix string) *DepartmentTable {
	return newDepartmentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDepartmentTable(schemaName, tableName, alias string) *DepartmentTable {
	return &DepartmentTable{
		departmentTable: newDepartmentTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newDepartmentTableImpl("", "excluded", ""),
	}
}

func newDepartmentTableImpl(schemaName, tableName, alias string) departmentTable {
	var (
		IDColumn          = sqlite.IntegerColumn("id")
		NameColumn        = sqlite.StringColumn("name")
		FacultyNameColumn = sqlite.StringColumn("faculty_name")
		FacultyIDColumn   = sqlite.IntegerColumn("faculty_id")
		CreatedAtColumn   = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn   = sqlite.TimestampColumn("updated_at")
		allColumns        = sqlite.ColumnList{IDColumn, NameColumn, FacultyNameColumn, FacultyIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = sqlite.ColumnList{NameColumn, FacultyNameColumn, FacultyIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return departmentTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		FacultyName: FacultyNameColumn,
		FacultyID:   FacultyIDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
