//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Event = newEventTable("", "event", "")

type eventTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	StartDate sqlite.ColumnTimestamp
	EndDate   sqlite.ColumnTimestamp
	Location  sqlite.ColumnString
	PosterURL sqlite.ColumnString
	CreatedAt sqlite.ColumnTimestamp
	UpdatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type EventTable struct {
	eventTable

	EXCLUDED eventTable
}

// AS creates new EventTable with assigned alias
func (a EventTable) AS(alias string) *EventTable {
	return newEventTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EventTable with assigned schema name
func (a EventTable) FromSchema(schemaName string) *EventTable {
	return newEventTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EventTable with assigned table prefix
func (a EventTable) WithPrefix(prefix string) *EventTable {
	return newEventTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EventTable with assigned table suffix
func (a EventTable) WithSuffix(suffix string) *EventTable {
	return newEventTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEventTable(schemaName, tableName, alias string) *EventTable {
	return &EventTable{
		eventTable: newEventTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newEventTableImpl("", "excluded", ""),
	}
}

func newEventTableImpl(schemaName, tableName, alias string) eventTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		StartDateColumn = sqlite.TimestampColumn("start_date")
		EndDateColumn   = sqlite.TimestampColumn("end_date")
		LocationColumn  = sqlite.StringColumn("location")
		PosterURLColumn = sqlite.StringColumn("poster_url")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn = sqlite.TimestampColumn("updated_at")
		allColumns      = sqlite.ColumnList{IDColumn, StartDateColumn, EndDateColumn, LocationColumn, PosterURLColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = sqlite.ColumnList{StartDateColumn, EndDateColumn, LocationColumn, PosterURLColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return eventTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		StartDate: StartDateColumn,
		EndDate:   EndDateColumn,
		Location:  LocationColumn,
		PosterURL: PosterURLColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
